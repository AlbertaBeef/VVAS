##################################
Example Pipelines
##################################


******************************************
Prerequisite
******************************************

Before start executing the example pipelines, make sure that the platform is configured as expected. Follow the steps mentioned below to configure the platform:
 - Open linux terminal
 - Execute the command mentioned below::
 
   source /opt/xilinx/ivas/xcdr/setup.sh
   
 - Platform is now ready to use.

Remaining section demonstrate how to build GStreamer pipelines for different usecases. We will start with basic pipelines and then step by step build more complex pipelines.


Decode Only Pipeline
==========================================================

This example accepts a clip that is already encoded in h.264 and will decode it using ivas_xvcudec plugin file into a RAW NV12 format and save it to disk at /tmp/xil_dec_out_*.nv12. To get more understanding of the ivas_xvcudec plugin properties, refer to the section IVAS VCU Decoder Plug-in.

.. code-block::
./01_gst_decode_only.sh 0 ~/videos/Test_1080p60.h264 1



Encode Only Pipeline
==========================================================

TBD



Basic Transcoding Pipelines
==========================================================




Decode and Resize into multiple resolutions
============================================




Resize and Encode into multiple resolutions 
============================================




Transcode into multiple resolutions
============================================




Lower latency Transcode into Multiple-Resolution outputs
========================================================================================


******************************
4K Resolution
******************************



4K Encode
================



4K Transcode
================================



*********************************************
Running multiple GStreamer Jobs
*********************************************






*********************************************
Faster than Real Time
*********************************************






*********************************************
Transcoding with Lookahead
*********************************************
